import axios from 'axios';
import type { NextPage } from 'next';
import Head from 'next/head';
import { useState } from 'react';
import styles from '../styles/Home.module.css';

const Row = ({hit}) => <div>
  <div>{hit.name}</div>
  <div>{hit.region}</div>
  <div>{hit.alpha2Code}</div>
  <div>{hit.alpha3Code}</div>
  {hit.altSpellings && hit.altSpellings.map(alt => <div>{alt}</div>)}
  <div>{hit.capital}</div>
  <div>{hit.borders && hit.borders.map(border => <div>{border}</div>)}</div>
</div>

const Home: NextPage = () => {

  const [result, setResult] = useState(null);

  const search = async event => {
    try {
      const result = await axios.post('http://localhost:9200/countries/_search?pretty', {
          query: {
            multi_match: {
              query: `*${event.target.value}*`,
              type: "best_fields",
              fields: ['borders', 'alpha2Code^2', 'alpha3Code^2', 'name', 'altSpellings', 'capital', 'region']
            },
          },
        },
        {
          auth: {
          username: 'elastic',
          password: '1234',
        }
      });
      console.log(result.data);
      setResult(result.data.hits.hits ?? []);
    } catch (error) {
      console.log(error);
      setResult(null);
    }
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Welcome to Elastic Shit!
        </h1>

        <p className={styles.description}>
          Ultra-Fast Elastic Fulltext Search Concept App
        </p>
        <p className={styles.code_done}>
          Tier 1: Next app querying an elastic search node running in a docker instance
        </p>
        <p className={styles.code_in_progress}>
          Tier 2: App posting to some sql database while elastic syncs through domain events
        </p>
        <p className={styles.code}>
          Tier 3: Use a message queue (rabbitMQ) to sync databases asynchronously
        </p>

        <div className={styles.grid}>
          <div className={styles.card}>
            <h2>Search &rarr;</h2>
            <input type="text" name="query" onChange={search} />
            <pre className={styles.code}>{result && result.map(hit => <Row hit={hit._source} />)}
            </pre>
          </div>
        </div>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
          ðŸ’©
          </span>
        </a>
      </footer>
    </div>
  )
}

export default Home
